/* Unpacks the brush data from the location at data_ptr
   to the values defined in the C++ files.
   In addition, increments data_ptr to the location of the
   brush transformation matrix.
 */
void
fastuidraw_painter_brush_unpack_values(in uint shader, inout uint data_ptr)
{
  vec4 pen_color;

  data_ptr = fastuidraw_read_pen_color(data_ptr, pen_color);
  fastuidraw_brush_pen_color_x = pen_color.x;
  fastuidraw_brush_pen_color_y = pen_color.y;
  fastuidraw_brush_pen_color_z = pen_color.z;
  fastuidraw_brush_pen_color_w = pen_color.w;

  if(fastuidraw_brush_shader_has_image(shader))
    {
      vec2 T;
      fastuidraw_image_data image;
      float image_factor;

      data_ptr = fastuidraw_read_image_data(data_ptr, image);

      image_factor = 1.0 / float(image.image_size_over_master_size);
      T = image.master_index_tile_atlas_location_xyz.xy + vec2(image.image_start) * image_factor;
      fastuidraw_brush_image_x = T.x;
      fastuidraw_brush_image_y = T.y;
      fastuidraw_brush_image_layer = image.master_index_tile_atlas_location_xyz.z;
      fastuidraw_brush_image_factor = image_factor;
      fastuidraw_brush_image_size_x = float(image.image_size.x);
      fastuidraw_brush_image_size_y = float(image.image_size.y);
      fastuidraw_brush_image_slack = image.slack;
      fastuidraw_brush_image_number_lookups = image.number_index_lookups;
      fastuidraw_brush_image_filter = image.image_filter;
    }
  else
    {
      fastuidraw_brush_image_x = 0.0;
      fastuidraw_brush_image_y = 0.0;
      fastuidraw_brush_image_layer = 0;
      fastuidraw_brush_image_factor = 1.0;
      fastuidraw_brush_image_size_x = 1.0;
      fastuidraw_brush_image_size_y = 1.0;
      fastuidraw_brush_image_slack = 0u;
      fastuidraw_brush_image_number_lookups = 1u;
      fastuidraw_brush_image_filter = 0u;
    }

  if(fastuidraw_brush_shader_has_radial_gradient(shader))
    {
      fastuidraw_radial_gradient gradient;
      float color_stop_recip;

      data_ptr = fastuidraw_read_radial_gradient(data_ptr, gradient);
      fastuidraw_brush_gradient_p0_x = gradient.start_pt.x;
      fastuidraw_brush_gradient_p0_y = gradient.start_pt.y;
      fastuidraw_brush_gradient_p1_x = gradient.end_pt.x;
      fastuidraw_brush_gradient_p1_y = gradient.end_pt.y;
      fastuidraw_brush_gradient_r0 = gradient.start_r;
      fastuidraw_brush_gradient_r1 = gradient.end_r;

      fastuidraw_brush_color_stop_length = gradient.color_stop_sequence_width;
      fastuidraw_brush_color_stop_x = gradient.color_stop_sequence_xy.x;
      fastuidraw_brush_color_stop_y = gradient.color_stop_sequence_xy.y;
    }
  else if(fastuidraw_brush_shader_has_linear_gradient(shader))
    {
      fastuidraw_linear_gradient gradient;

      data_ptr = fastuidraw_read_linear_gradient(data_ptr, gradient);
      fastuidraw_brush_gradient_p0_x = gradient.start_pt.x;
      fastuidraw_brush_gradient_p0_y = gradient.start_pt.y;
      fastuidraw_brush_gradient_p1_x = gradient.end_pt.x;
      fastuidraw_brush_gradient_p1_y = gradient.end_pt.y;
      fastuidraw_brush_gradient_r0 = 0.0;
      fastuidraw_brush_gradient_r1 = 0.0;

      fastuidraw_brush_color_stop_length = gradient.color_stop_sequence_width;
      fastuidraw_brush_color_stop_x = gradient.color_stop_sequence_xy.x;
      fastuidraw_brush_color_stop_y = gradient.color_stop_sequence_xy.y;
    }
  else
    {
      fastuidraw_brush_gradient_p0_x = 0.0;
      fastuidraw_brush_gradient_p0_y = 0.0;
      fastuidraw_brush_gradient_p1_x = 1.0;
      fastuidraw_brush_gradient_p1_y = 1.0;
      fastuidraw_brush_gradient_r0 = 0.0;
      fastuidraw_brush_gradient_r1 = 1.0;
      fastuidraw_brush_color_stop_length = 1.0;
      fastuidraw_brush_color_stop_x = 0.0;
      fastuidraw_brush_color_stop_y = 0.0;
    }

  if(fastuidraw_brush_shader_has_repeat_window(shader))
    {
      fastuidraw_repeat_window repeat_window;

      data_ptr = fastuidraw_read_repeat_window(data_ptr, repeat_window);
      fastuidraw_brush_repeat_window_x = repeat_window.xy.x;
      fastuidraw_brush_repeat_window_y = repeat_window.xy.y;
      fastuidraw_brush_repeat_window_w = repeat_window.wh.x;
      fastuidraw_brush_repeat_window_h = repeat_window.wh.y;
    }
  else
    {
      fastuidraw_brush_repeat_window_x = 0.0;
      fastuidraw_brush_repeat_window_y = 0.0;
      fastuidraw_brush_repeat_window_w = 1.0;
      fastuidraw_brush_repeat_window_h = 1.0;
    }

  fastuidraw_brush_shader = shader;
}

uint
fastuidraw_painter_offset_to_transformation(uint shader)
{
  uint r;

  r = uint(fastuidraw_shader_pen_num_blocks);

  if(fastuidraw_brush_shader_has_image(shader))
    {
      r += uint(fastuidraw_shader_image_num_blocks);
    }

  if(fastuidraw_brush_shader_has_radial_gradient(shader))
    {
      r += uint(fastuidraw_shader_radial_gradient_num_blocks);
    }
  else if(fastuidraw_brush_shader_has_linear_gradient(shader))
    {
      r += uint(fastuidraw_shader_linear_gradient_num_blocks);
    }

  if(fastuidraw_brush_shader_has_repeat_window(shader))
    {
      r += uint(fastuidraw_shader_repeat_window_num_blocks);
    }

  return r;
}

void
fastuidraw_process_image_data(in uint shader_brush,
                              in fastuidraw_brush_image_data_raw raw,
                              out fastuidraw_brush_image_data cooked)
{
  uvec3 master_xyz;
  uint index_pows, slack, number_index_lookups, ww;

  master_xyz.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_master_index_x_bit0,
                                        fastuidraw_image_master_index_x_num_bits,
                                        raw.image_atlas_location_xyz);

  master_xyz.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_master_index_y_bit0,
                                        fastuidraw_image_master_index_y_num_bits,
                                        raw.image_atlas_location_xyz);

  master_xyz.z = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_master_index_z_bit0,
                                        fastuidraw_image_master_index_z_num_bits,
                                        raw.image_atlas_location_xyz);

  cooked.image_size.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_size_x_bit0,
                                               fastuidraw_image_size_x_num_bits,
                                               raw.image_size_xy);

  cooked.image_size.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_size_y_bit0,
                                               fastuidraw_image_size_y_num_bits,
                                               raw.image_size_xy);

  cooked.image_start.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_size_x_bit0,
                                                fastuidraw_image_size_x_num_bits,
                                                raw.image_start_xy);

  cooked.image_start.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_size_y_bit0,
                                                fastuidraw_image_size_y_num_bits,
                                                raw.image_start_xy);

  slack = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_slack_bit0,
                                 fastuidraw_image_slack_num_bits,
                                 shader_brush);

  number_index_lookups = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_number_index_lookup_bit0,
                                                 fastuidraw_image_number_index_lookup_num_bits,
                                                 shader_brush);

  master_xyz.xy *= uint(FASTUIDRAW_PAINTER_IMAGE_ATLAS_INDEX_TILE_SIZE);
  cooked.master_index_tile_atlas_location_xyz = vec3(master_xyz);
  cooked.slack = slack;
  cooked.number_index_lookups = number_index_lookups;

  if(number_index_lookups > uint(0))
    {
      /*
        The factor from master index tile to color tile is given by
          pow(SizeOfImageTile, NumberIndexLookUps - 1)
          = pow(2, log2(SizeOfImageTile) * (NumberIndexLookUps - 1))
        Bit shifting gives us the pow(2, V)
       */
      ww = uint(FASTUIDRAW_PAINTER_IMAGE_ATLAS_INDEX_TILE_LOG2_SIZE) * (number_index_lookups - uint(1));
      index_pows = uint(1) << ww;
      cooked.image_size_over_master_size = (uint(FASTUIDRAW_PAINTER_IMAGE_ATLAS_COLOR_TILE_SIZE) - uint(2) * slack) * index_pows;
    }
  else
    {
      cooked.image_size_over_master_size = uint(1);
    }
}

void
fastuidraw_process_gradient_data(in fastuidraw_brush_gradient_raw raw,
                                 out fastuidraw_brush_gradient cooked)
{
  cooked.p0 = raw.p0;
  cooked.p1 = raw.p1;

  cooked.r0 = raw.r0;
  cooked.r1 = raw.r1;

  cooked.color_stop_sequence_length = float(raw.color_stop_sequence_length);

  uvec2 color_stop_sequence_xy;
  color_stop_sequence_xy.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_color_stop_x_bit0,
                                                    fastuidraw_color_stop_x_num_bits,
                                                    raw.color_stop_sequence_xy);

  color_stop_sequence_xy.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_color_stop_y_bit0,
                                                    fastuidraw_color_stop_y_num_bits,
                                                    raw.color_stop_sequence_xy);

  cooked.color_stop_sequence_xy = vec2(color_stop_sequence_xy);
}

uint
fastuidraw_read_brush_image_data(in uint location, in uint shader, out fastuidraw_brush_image_data image)
{
  uint return_value;
  fastuidraw_brush_image_data_raw raw;

  return_value = fastuidraw_read_brush_image_raw_data(location, raw);
  fastuidraw_process_image_data(shader, raw, image);
  return return_value;
}

uint
fastuidraw_read_brush_linear_gradient_data(in uint location, out fastuidraw_brush_gradient grad)
{
  uint return_value;
  fastuidraw_brush_gradient_raw raw;

  return_value = fastuidraw_read_brush_linear_gradient_data(location, raw);
  raw.r0 = 0.0;
  raw.r1 = 1.0;
  fastuidraw_process_gradient_data(raw, grad);
  return return_value;
}

uint
fastuidraw_read_brush_radial_gradient_data(in uint location, out fastuidraw_brush_gradient grad)
{
  uint return_value;
  fastuidraw_brush_gradient_raw raw;

  return_value = fastuidraw_read_brush_radial_gradient_data(location, raw);
  fastuidraw_process_gradient_data(raw, grad);
  return return_value;
}

/* Unpacks the brush data from the location at data_ptr
   to the values defined in the shader file
   fastuidraw_painter_brush_unpacked_values.glsl.resource_string.
   In addition, increments data_ptr to the location of the
   brush transformation matrix.
 */
void
fastuidraw_painter_brush_unpack_values(in uint shader, inout uint data_ptr)
{
  fastuidraw_brush_image_data image;
  fastuidraw_brush_gradient gradient;
  fastuidraw_brush_repeat_window repeat_window;

  vec4 pen_color;
  data_ptr = fastuidraw_read_pen_color(data_ptr, pen_color);
  fastuidraw_brush_pen_color_x = pen_color.x;
  fastuidraw_brush_pen_color_y = pen_color.y;
  fastuidraw_brush_pen_color_z = pen_color.z;
  fastuidraw_brush_pen_color_w = pen_color.w;

  if(fastuidraw_brush_shader_has_image(shader))
    {
      data_ptr = fastuidraw_read_brush_image_data(data_ptr, shader, image);
    }
  else
    {
      image.master_index_tile_atlas_location_xyz = vec3(0.0, 0.0, 0.0);
      image.image_size = uvec2(1, 1);
      image.slack = uint(0);
      image.number_index_lookups = uint(0);
      image.image_size_over_master_size = uint(1);
    }

  if(fastuidraw_brush_shader_has_radial_gradient(shader))
    {
      data_ptr = fastuidraw_read_brush_radial_gradient_data(data_ptr, gradient);
    }
  else if(fastuidraw_brush_shader_has_linear_gradient(shader))
    {
      data_ptr = fastuidraw_read_brush_linear_gradient_data(data_ptr, gradient);
    }
  else
    {
      gradient.p0 = gradient.p1 = vec2(0.0, 0.0);
      gradient.r0 = gradient.r1 = 0.0;
      gradient.color_stop_sequence_length = 1.0;
      gradient.color_stop_sequence_xy = vec2(0.0, 0.0);
    }

  if(fastuidraw_brush_shader_has_repeat_window(shader))
    {
      data_ptr = fastuidraw_read_brush_repeat_window(data_ptr, repeat_window);
    }
  else
    {
      repeat_window.xy = vec2(0.0, 0.0);
      repeat_window.wh = vec2(1.0, 1.0);
    }

  float image_factor;

  fastuidraw_brush_repeat_window_x = repeat_window.xy.x;
  fastuidraw_brush_repeat_window_y = repeat_window.xy.y;
  fastuidraw_brush_repeat_window_w = repeat_window.wh.x;
  fastuidraw_brush_repeat_window_h = repeat_window.wh.y;

  fastuidraw_brush_gradient_p0_x = gradient.p0.x;
  fastuidraw_brush_gradient_p0_y = gradient.p0.y;
  fastuidraw_brush_gradient_p1_x = gradient.p1.x;
  fastuidraw_brush_gradient_p1_y = gradient.p1.y;
  fastuidraw_brush_gradient_r0 = gradient.r0;
  fastuidraw_brush_gradient_r1 = gradient.r1;

  image_factor = 1.0 / float(image.image_size_over_master_size);
  vec2 T;
  T = image.master_index_tile_atlas_location_xyz.xy + vec2(image.image_start) * image_factor;
  fastuidraw_brush_image_x = T.x;
  fastuidraw_brush_image_y = T.y;
  fastuidraw_brush_image_layer = image.master_index_tile_atlas_location_xyz.z;
  fastuidraw_brush_image_factor = image_factor;
  fastuidraw_brush_image_size_x = float(image.image_size.x);
  fastuidraw_brush_image_size_y = float(image.image_size.y);

  float color_stop_recip;

  color_stop_recip = fastuidraw_colorStopAtlas_size_reciprocal;
  fastuidraw_brush_color_stop_length = color_stop_recip * gradient.color_stop_sequence_length;
  fastuidraw_brush_color_stop_x = color_stop_recip * gradient.color_stop_sequence_xy.x;
  fastuidraw_brush_color_stop_y = gradient.color_stop_sequence_xy.y;
  fastuidraw_brush_shader = shader;
}

uint
fastuidraw_painter_offset_to_transformation(uint shader)
{
  uint r;

  r = uint(fastuidraw_shader_pen_num_blocks);

  if(fastuidraw_brush_shader_has_image(shader))
    {
      r += uint(fastuidraw_shader_image_num_blocks);
    }

  if(fastuidraw_brush_shader_has_radial_gradient(shader))
    {
      r += uint(fastuidraw_shader_radial_gradient_num_blocks);
    }
  else if(fastuidraw_brush_shader_has_linear_gradient(shader))
    {
      r += uint(fastuidraw_shader_linear_gradient_num_blocks);
    }

  if(fastuidraw_brush_shader_has_repeat_window(shader))
    {
      r += uint(fastuidraw_shader_repeat_window_num_blocks);
    }

  return r;
}

void
fastuidraw_vert_brush_processing(in vec2 in_p, in fastuidraw_shader_header h)
{
  uint shader;
  uint data_ptr;
  fastuidraw_brush_image_data image;
  fastuidraw_brush_gradient gradient;
  fastuidraw_brush_repeat_window repeat_window;
  vec2 p;

  p = in_p;
  shader = h.brush_shader;
  data_ptr = h.brush_shader_data_location;

  #ifdef FASTUIDRAW_PAINTER_UNPACK_AT_FRAGMENT_SHADER
  {
    data_ptr += fastuidraw_painter_offset_to_transformation(shader);
  }
  #else
  {
    /* fastuidraw_painter_brush_unpack_values() increments data_ptr
       to the location of the transformation values for the brush
    */
    fastuidraw_painter_brush_unpack_values(shader, data_ptr);
  }
  #endif

  if(fastuidraw_brush_shader_has_transformation_matrix(shader))
    {
      mat2 m;
      data_ptr = fastuidraw_read_brush_transformation_matrix(data_ptr, m);
      p = m * p;
    }

  if(fastuidraw_brush_shader_has_transformation_translation(shader))
    {
      vec2 q;
      data_ptr = fastuidraw_read_brush_transformation_translation(data_ptr, q);
      p += q;
    }

  fastuidraw_brush_p_x = p.x;
  fastuidraw_brush_p_y = p.y;
}

vec4
fastuidraw_gl_vert_main(in uint sub_shader,
                        in uvec4 uprimary_attrib,
                        in uvec4 usecondary_attrib,
                        in uvec4 uint_attrib,
                        in uint shader_data_offset,
                        out uint z_add)
{
  vec2 primary_attrib;

  primary_attrib = uintBitsToFloat(uprimary_attrib.xy);
  #ifdef FASTUIDRAW_FILL_SHADER_AA
    {
      float d;
      vec4 neighbor_attribs, secondary_attrib;
      vec3 a, b, p;

      secondary_attrib = uintBitsToFloat(usecondary_attrib);
      neighbor_attribs = uintBitsToFloat(uint_attrib);

      /* compute the distance, in pixels from this vertex point,
         primary_attrib.xy to the line that passes through
         the points a = neighbor_attribs.xy and
         b = neighbor_attribs.zw.
       */
      a = fastuidraw_item_matrix * vec3(neighbor_attribs.xy, 1.0);
      b = fastuidraw_item_matrix * vec3(neighbor_attribs.zw, 1.0);
      p = fastuidraw_item_matrix * vec3(primary_attrib.xy, 1.0);
      if(a.z <= 0.0)
        {
          vec3 c;
          c = a;
          a = b;
          b = c;
        }
      if(a.z <= 0)
        {
          /* the entire edge is behind w = 0, thus
             it is like the triangle does not need
             to be drawn with anti-aliasing. Choose
             a large enough value for d so that
             regardless of where p lands on the
             screen, the distance value when interpolated
             is larger than one. TODO.
           */
          d = 1000000.0;
        }
      else
        {
          vec2 pa, pp, v, pp_pa;
          float r, pp_pa_dot_v;

          v = vec2(b.x * a.z - a.x * b.z, b.y * a.z - a.y * b.z) * fastuidraw_viewport_pixels;

          /* TODO: handle if p.z <=0 */
          pa = fastuidraw_viewport_pixels * a.xy / a.z;
          pp = fastuidraw_viewport_pixels * p.xy / p.z;
          pp_pa = pp - pa;
          pp_pa_dot_v = dot(pp_pa, v);
          r = pp_pa_dot_v * pp_pa_dot_v / dot(v, v);
          d = sqrt(dot(pp_pa, pp_pa) - r);
        }

      fastuidraw_painter_fill_inside0 = secondary_attrib.x;
      fastuidraw_painter_fill_inside1 = secondary_attrib.y;
      fastuidraw_painter_fill_inside2 = secondary_attrib.z;

      if(uprimary_attrib.z == 0u)
        {
          fastuidraw_painter_fill_inside0 *= d;
        }
      else if(uprimary_attrib.z == 1u)
        {
          fastuidraw_painter_fill_inside1 *= d;
        }
      else
        {
          fastuidraw_painter_fill_inside2 *= d;
        }
    }
  #endif
  z_add = 0u;
  return primary_attrib.xyxy;
}
